package com.aisino.ws.op;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.18
 * 2017-09-14T23:32:12.983+08:00
 * Generated source version: 2.7.18
 * 
 */
@WebServiceClient(name = "IEInvWebService", 
                  wsdlLocation = "file:/D:/work/eclipse.work.invoice/efs-e-invoice-sell/e-invoice-pro/src/main/java/hangxin/invoice/bean/op.wsdl",
                  targetNamespace = "http://ws.aisino.com") 
public class IEInvWebService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://ws.aisino.com", "IEInvWebService");
    public final static QName IEInvWebServiceHttpPort = new QName("http://ws.aisino.com", "IEInvWebServiceHttpPort");
    static {
        URL url = null;
        try {
            url = new URL("file:/D:/work/eclipse.work.invoice/efs-e-invoice-sell/e-invoice-pro/src/main/java/hangxin/invoice/bean/op.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(IEInvWebService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/D:/work/eclipse.work.invoice/efs-e-invoice-sell/e-invoice-pro/src/main/java/hangxin/invoice/bean/op.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public IEInvWebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public IEInvWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public IEInvWebService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public IEInvWebService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public IEInvWebService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public IEInvWebService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns IEInvWebServicePortType
     */
    @WebEndpoint(name = "IEInvWebServiceHttpPort")
    public IEInvWebServicePortType getIEInvWebServiceHttpPort() {
        return super.getPort(IEInvWebServiceHttpPort, IEInvWebServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IEInvWebServicePortType
     */
    @WebEndpoint(name = "IEInvWebServiceHttpPort")
    public IEInvWebServicePortType getIEInvWebServiceHttpPort(WebServiceFeature... features) {
        return super.getPort(IEInvWebServiceHttpPort, IEInvWebServicePortType.class, features);
    }

}
